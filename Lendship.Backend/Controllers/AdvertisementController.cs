/*
 * Simple Inventory API
 *
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Lendship.Backend.DTO;
using Microsoft.AspNetCore.Authorization;
using Lendship.Backend.Models;
using System.Linq;
using Lendship.Backend.Authentication;
using Microsoft.AspNetCore.Identity;
using System.Security.Claims;
using Lendship.Backend.Interfaces.Services;
using Lendship.Backend.Exceptions;

namespace Lendship.Backend.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [Authorize]
    [ApiController]
    [Route("[controller]")]
    public class AdvertisementController : ControllerBase
    {
        private readonly IAdvertisementService _adService;

        public AdvertisementController(IAdvertisementService adService)
        {
            _adService = adService;
        }

        /// <summary>
        /// get an advertisement
        /// </summary>
        /// <remarks>Gets an advertisement</remarks>
        /// <param name="advertisementId">id of the advertisement</param>
        /// <response code="200">advertisement</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpGet]
        [Route("{advertisementId}")]
        public virtual IActionResult GetAdvertisement([FromRoute][Required] int advertisementId)
        {
            var advertisement = _adService.GetAdvertisement(advertisementId);

            if (advertisement != null)
            {
                return new ObjectResult(advertisement.ToJson());
            }

            return this.BadRequest("Advertisement not found.");
        }

        /// <summary>
        /// creates a new advertisement
        /// </summary>
        /// <remarks>Create a new advertisement</remarks>
        /// <param name="advertisement">Advertisement to create</param>
        /// <response code="201">item created</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpPost]
        public virtual IActionResult CreateAdvertisement([FromBody]AdvertisementDetailsDto advertisement)
        {
            try
            {
                _adService.CreateAdvertisement(advertisement);
                return StatusCode(200);
            } catch (Exception e)
            {
                Console.WriteLine("Exception at creating advertisement: " + e.Message);
                return this.BadRequest(e.Message);
            }
        }

        /// <summary>
        /// updates a new advertisement
        /// </summary>
        /// <remarks>Update a new advertisement</remarks>
        /// <param name="advertisement">Advertisement to update</param>
        /// <response code="201">item created</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpPut]
        public virtual IActionResult UpdateAdvertisement([FromBody] AdvertisementDetailsDto advertisement)
        {
            try
            {
                _adService.UpdateAdvertisement(advertisement);
                return StatusCode(201);
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception at updating advertisement: " + e.Message);
                return this.BadRequest(e.Message);
            }
        }

        /// <summary>
        /// delete own advertisement
        /// </summary>
        /// <remarks>Delete own advertisement</remarks>
        /// <param name="advertisementId">Advertisement&#39;s id to delete</param>
        /// <response code="200">item deleted</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpDelete]
        public virtual IActionResult DeleteAdvertisement([FromQuery]int advertisementId)
        {
            try
            {
                _adService.DeleteAdvertisement(advertisementId);
                return StatusCode(200);
            } catch(Exception e)
            {
                Console.WriteLine("Exception at deleting advertisement: " + e.Message);
                return this.BadRequest(e.Message);
            }
        }

        /// <summary>
        /// list and search advertisement
        /// </summary>
        /// <remarks>Home page with advertisement listing and searching</remarks>
        /// <param name="advertisementType">property or service</param>
        /// <param name="credit">advertisements with credit payment</param>
        /// <param name="cash">advertisements with cash payment</param>
        /// <param name="category">advertisement categories</param>
        /// <param name="city">location of the advertisements</param>
        /// <param name="distance">distance from the city or from the users location</param>
        /// <param name="sortBy">sorting the results</param>
        /// <response code="200">search results</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpGet]
        public virtual IActionResult GetAdvertisements([FromQuery]string advertisementType, [FromQuery]bool credit, [FromQuery]bool cash, [FromQuery]string category, [FromQuery]string city, [FromQuery]int distance, [FromQuery]string sortBy)
        {
            var advertisements = _adService.GetAdvertisements(advertisementType, credit, cash, category, city, distance, sortBy);
            return new ObjectResult(JsonConvert.SerializeObject(advertisements));
        }

        /// <summary>
        /// get own and saved advertisements
        /// </summary>
        /// <remarks>Gets the advertisements from the user</remarks>
        /// <param name="advertisementType">property or service</param>
        /// <param name="credit">advertisements with credit payment</param>
        /// <param name="cash">advertisements with cash payment</param>
        /// <param name="category">advertisement categories</param>
        /// <param name="city">location of the advertisements</param>
        /// <param name="distance">distance of the city or from the users location</param>
        /// <param name="sortBy">sorting the results</param>
        /// <response code="200">search results matching criteria</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpGet]
        [Route("own")]
        public virtual IActionResult GetOwnAdvertisements([FromQuery]string advertisementType, [FromQuery]bool? credit, [FromQuery]bool? cash, [FromQuery]string category, [FromQuery]string city, [FromQuery]int? distance, [FromQuery]string sortBy)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Advertisement));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AdvertisementDetailsDto>(exampleJson)
            : default(AdvertisementDetailsDto);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// get saved advertisements
        /// </summary>
        /// <remarks>Gets the saved advertisements for the user</remarks>
        /// <param name="advertisementType">property or service</param>
        /// <param name="credit">advertisements with credit payment</param>
        /// <param name="cash">advertisements with cash payment</param>
        /// <param name="category">advertisement categories</param>
        /// <param name="city">location of the advertisements</param>
        /// <param name="distance">distance of the city or from the users location</param>
        /// <param name="sortBy">sorting the results</param>
        /// <response code="200">search results matching criteria</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpGet]
        [Route("saved")]
        public virtual IActionResult GetSavedAdvertisements([FromQuery]string advertisementType, [FromQuery]bool credit, [FromQuery]bool cash, [FromQuery]string category, [FromQuery]string city, [FromQuery]int distance, [FromQuery]string sortBy)
        {
            try
            {
                var advertisements = _adService.GetSavedAdvertisements(advertisementType, credit, cash, category, city, distance, sortBy);
                return new ObjectResult(JsonConvert.SerializeObject(advertisements));
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception at getting saving advertisements: " + e.Message);
                return this.BadRequest(e.Message);
            }
        }

        /// <summary>
        /// save an advertisement
        /// </summary>
        /// <remarks>Saves an advertisement for the user</remarks>
        /// <param name="advertisementId">Advertisement&#39;s id to remove</param>
        /// <response code="200">item removed</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpPost]
        [Route("saved")]
        public virtual IActionResult SaveAdvertisement([FromQuery]int advertisementId)
        {
            try
            {
                _adService.SaveAdvertisementForUser(advertisementId);
                return StatusCode(200);
            } catch (Exception e)
            {
                Console.WriteLine("Exception at saving advertisement: " + e.Message);
                return this.BadRequest(e.Message);
            }
        }

        /// <summary>
        /// remove advertisement from saved list
        /// </summary>
        /// <remarks>Remove a saved advertisement</remarks>
        /// <param name="advertisementId">Advertisement&#39;s id to remove</param>
        /// <response code="200">item removed</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpDelete]
        [Route("saved")]
        public virtual IActionResult RemoveAdvertisement([FromQuery] int advertisementId)
        {
            _adService.RemoveSavedAdvertisement(advertisementId);
            return StatusCode(200);
        }
    }
}
