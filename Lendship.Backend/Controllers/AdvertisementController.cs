/*
 * Simple Inventory API
 *
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Lendship.Backend.DTO;
using Microsoft.AspNetCore.Authorization;

namespace Lendship.Backend.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [Authorize]
    [ApiController]
    [Route("[controller]")]
    public class AdvertisementController : ControllerBase
    { 
        /// <summary>
        /// creates a new advertisement
        /// </summary>
        /// <remarks>Create a new advertisement</remarks>
        /// <param name="advertisement">Advertisement to create</param>
        /// <response code="201">item created</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpPost]
        public virtual IActionResult CreateAdvertisement([FromBody]AdvertisementDto advertisement)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);


            throw new NotImplementedException();
        }

        /// <summary>
        /// create availability of advertisement
        /// </summary>
        /// <remarks>Create availability of advertisement</remarks>
        /// <param name="advertisementId">id of the advertisement</param>
        /// <param name="availability">Availability to create</param>
        /// <response code="201">availability created</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpPost]
        [Route("{advertisementId}")]
        public virtual IActionResult CreateAvailabilityOfAdvertisement([FromRoute][Required]string advertisementId, [FromBody]AvailabilityDto availability)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);


            throw new NotImplementedException();
        }

        /// <summary>
        /// delete own advertisement
        /// </summary>
        /// <remarks>Delete own advertisement</remarks>
        /// <param name="advertisementId">Advertisement&#39;s id to delete</param>
        /// <response code="200">item deleted</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpDelete]
        [Route("delete")]
        public virtual IActionResult DeleteAdvertisement([FromQuery]int? advertisementId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);


            throw new NotImplementedException();
        }

        /// <summary>
        /// list and search advertisement
        /// </summary>
        /// <remarks>Home page with advertisement listing and searching</remarks>
        /// <param name="advertisementType">property or service</param>
        /// <param name="credit">advertisements with credit payment</param>
        /// <param name="cash">advertisements with cash payment</param>
        /// <param name="category">advertisement categories</param>
        /// <param name="city">location of the advertisements</param>
        /// <param name="distance">distance from the city or from the users location</param>
        /// <param name="sortBy">sorting the results</param>
        /// <response code="200">search results</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpGet]
        public virtual IActionResult GetAdvertisements([FromQuery]string advertisementType, [FromQuery]bool? credit, [FromQuery]bool? cash, [FromQuery]string category, [FromQuery]string city, [FromQuery]int? distance, [FromQuery]string sortBy)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Advertisement>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            string exampleJson = null;
            exampleJson = "{}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<AdvertisementDto>>(exampleJson)
            : default(List<AdvertisementDto>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// get availability of advertisement
        /// </summary>
        /// <remarks>Gets availability of advertisement</remarks>
        /// <param name="advertisementId">id of the advertisement</param>
        /// <response code="200">availability of advertisement</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpGet]
        [Route("{advertisementId}")]
        public virtual IActionResult GetAvailabilityOfAdvertisement([FromRoute][Required]string advertisementId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Availability));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AvailabilityDto>(exampleJson)
            : default(AvailabilityDto);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// get own and saved advertisements
        /// </summary>
        /// <remarks>Gets the advertisements from the user</remarks>
        /// <param name="advertisementType">property or service</param>
        /// <param name="credit">advertisements with credit payment</param>
        /// <param name="cash">advertisements with cash payment</param>
        /// <param name="category">advertisement categories</param>
        /// <param name="city">location of the advertisements</param>
        /// <param name="distance">distance of the city or from the users location</param>
        /// <param name="sortBy">sorting the results</param>
        /// <response code="200">search results matching criteria</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpGet]
        [Route("own")]
        public virtual IActionResult GetOwnAdvertisements([FromQuery]string advertisementType, [FromQuery]bool? credit, [FromQuery]bool? cash, [FromQuery]string category, [FromQuery]string city, [FromQuery]int? distance, [FromQuery]string sortBy)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Advertisement));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AdvertisementDto>(exampleJson)
            : default(AdvertisementDto);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// get saved advertisements
        /// </summary>
        /// <remarks>Gets the saved advertisements for the user</remarks>
        /// <param name="advertisementType">property or service</param>
        /// <param name="credit">advertisements with credit payment</param>
        /// <param name="cash">advertisements with cash payment</param>
        /// <param name="category">advertisement categories</param>
        /// <param name="city">location of the advertisements</param>
        /// <param name="distance">distance of the city or from the users location</param>
        /// <param name="sortBy">sorting the results</param>
        /// <response code="200">search results matching criteria</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpGet]
        [Route("saved")]
        public virtual IActionResult GetSavedAdvertisements([FromQuery]string advertisementType, [FromQuery]bool? credit, [FromQuery]bool? cash, [FromQuery]string category, [FromQuery]string city, [FromQuery]int? distance, [FromQuery]string sortBy)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Advertisement));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AdvertisementDto>(exampleJson)
            : default(AdvertisementDto);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// remove advertisement from saved list
        /// </summary>
        /// <remarks>Remove a saved advertisement</remarks>
        /// <param name="advertisementId">Advertisement&#39;s id to remove</param>
        /// <response code="200">item removed</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpDelete]
        [Route("remove")]
        public virtual IActionResult RemoveAdvertisement([FromQuery]int? advertisementId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);


            throw new NotImplementedException();
        }

        /// <summary>
        /// updates a new advertisement
        /// </summary>
        /// <remarks>Update a new advertisement</remarks>
        /// <param name="advertisement">Advertisement to update</param>
        /// <response code="201">item created</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpPut]
        public virtual IActionResult UpdateAdvertisement([FromBody]AdvertisementDto advertisement)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);


            throw new NotImplementedException();
        }

        /// <summary>
        /// update availability of advertisement
        /// </summary>
        /// <remarks>Update availability of advertisement</remarks>
        /// <param name="advertisementId">id of the advertisement</param>
        /// <param name="availability">Availability to update</param>
        /// <response code="201">availability updated</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpPut]
        [Route("{advertisementId}")]
        public virtual IActionResult UpdateAvailabilityOfAdvertisement([FromRoute][Required]string advertisementId, [FromBody]AvailabilityDto availability)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);


            throw new NotImplementedException();
        }
    }
}
