/*
 * Simple Inventory API
 *
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.ComponentModel.DataAnnotations;
using Lendship.Backend.DTO;
using Lendship.Backend.Interfaces.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;

namespace Lendship.Backend.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [Authorize]
    [ApiController]
    [Route("[controller]")]
    public class ClosedGroupController : ControllerBase
    {
        private readonly IClosedGroupService _cgroupService;

        public ClosedGroupController(IClosedGroupService cgroupService)
        {
            _cgroupService = cgroupService;
        }

        /// <summary>
        /// get closed group to advertisementId
        /// </summary>
        /// <remarks>Gets closed group to advertisementId</remarks>
        /// <param name="advertisementId">id of the advertisement</param>
        /// <response code="200">Closed group</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpGet]
        [Route("{advertisementId}")]
        public virtual IActionResult GetClosedGroupForAdvertisement([FromRoute][Required] int advertisementId)
        {
            var cgroup = _cgroupService.GetClosedGroupOfAdvertisement(advertisementId);

            if (cgroup != null)
            {
                return new ObjectResult(cgroup.ToJson());
            }

            return this.BadRequest("Closed Group not found.");
        }

        /// <summary>
        /// create closed group for advertisement
        /// </summary>
        /// <remarks>Creates closed group for advertisement</remarks>
        /// <param name="closedGroup">Closed Group</param>
        /// <response code="201">group created</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpPost]
        public virtual IActionResult CreateClosedGroupForAdvertisement([FromBody]ClosedGroupDto closedGroup)
        {
            try
            {
                _cgroupService.CreateClosedGroup(closedGroup);
                return StatusCode(201);
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception at creating closed group: " + e.Message);
                return this.BadRequest(e.Message);
            }
        }

        /// <summary>
        /// add user to closed group
        /// </summary>
        /// <remarks>Add user to closed group</remarks>
        /// <param name="userEmail">User email</param>
        /// <param name="closedGroupId">Closed group id</param>
        /// <response code="201">group updated</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpPut]
        [Route("add/{userEmail}/{closedGroupId}")]
        public virtual IActionResult AddUserToClosedGroup([FromRoute][Required] string userEmail, [FromRoute][Required] int closedGroupId)
        {
            try
            {
                _cgroupService.AddUserToClosedGroup(userEmail, closedGroupId);
                return StatusCode(200);
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception at updating closed group: " + e.Message);
                return this.BadRequest(e.Message);
            }
        }

        /// <summary>
        /// remove user to closed group
        /// </summary>
        /// <remarks>Add user to closed group</remarks>
        /// <param name="userEmail">User email</param>
        /// <param name="closedGroupId">Closed group id</param>
        /// <response code="201">group updated</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpPut]
        [Route("remove/{userEmail}/{closedGroupId}")]
        public virtual IActionResult RemoveUserToClosedGroup([FromRoute][Required] string userEmail, [FromRoute][Required] int closedGroupId)
        {
            try
            {
                _cgroupService.RemoveUserToClosedGroup(userEmail, closedGroupId);
                return StatusCode(200);
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception at updating closed group: " + e.Message);
                return this.BadRequest(e.Message);
            }
        }
    }
}
