/*
 * Simple Inventory API
 *
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Lendship.Backend.Interfaces.Services;
using Newtonsoft.Json.Linq;
using System.IdentityModel.Tokens.Jwt;

namespace Lendship.Backend.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [Authorize]
    [ApiController]
    [Route("[controller]")]
    public class ImageController : Controller
    {
        private readonly IImageService _imgService;

        public ImageController(IImageService imgService)
        {
            _imgService = imgService;
        }
        /// <summary>
        /// uploads image
        /// </summary>
        /// <remarks>Uploads profile image</remarks>
        /// <response code="200">Success</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpPost]
        [Route("profile")]
        public virtual IActionResult UploadImage()
        {
            try
            {
                IFormFile file = Request.Form.Files[0];
                var path = _imgService.UploadProfileImage(file);
                return Ok(new
                {
                    path = path
                });
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception at uploading profile image: " + e.Message);
                return this.BadRequest("Exception at uploading profile image: " + e.Message);
            }
        }

        /// <summary>
        /// uploads images
        /// </summary>
        /// <remarks>Uploads images to an advertisement</remarks>
        /// <param name="advertisementId"></param>
        /// <response code="200">Success</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpPost]
        [Route("{advertisementId}")]
        public virtual IActionResult UploadImages([FromRoute][Required] int advertisementId)
        {
            try
            {
                var files = Request.Form.Files;
                _imgService.UploadImages(files, advertisementId);
                return StatusCode(201);
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception at uploading images: " + e.Message);
                return this.BadRequest("Exception at uploading images: " + e.Message);
            }

            throw new NotImplementedException();
        }

        /// <summary>
        /// delete profile image
        /// </summary>
        /// <remarks>Delete profile image</remarks>
        /// <response code="200">Success</response>
        /// <response code="401"></response>
        [HttpDelete]
        [Route("profile")]
        public virtual IActionResult DeleteImage()
        {
            _imgService.DeleteProfileImage();
            return StatusCode(200);
        }

        /// <summary>
        /// delete images for an advertisement
        /// </summary>
        /// <remarks>Delete images in folder</remarks>
        /// <param name="advertisementId"></param>
        /// <response code="200">Success</response>
        /// <response code="401"></response>
        [HttpDelete]
        [Route("{advertisementId}")]
        public virtual IActionResult DeleteImagesFolder([FromRoute][Required] int advertisementId)
        {
            _imgService.DeleteImages(advertisementId);
            return StatusCode(200);
        }

        /// <summary>
        /// deletes one images at an advertisement by name
        /// </summary>
        /// <remarks>Delete one image in folder</remarks>
        /// <param name="advertisementId"></param>
        /// <param name="fileName"></param>
        /// <response code="200">Success</response>
        /// <response code="401"></response>
        [HttpDelete]
        [Route("{advertisementId}/{fileName}")]
        public virtual IActionResult DeleteOneFromAdvertisement([FromRoute][Required] int advertisementId, [FromRoute][Required] string fileName)
        {
            _imgService.DeleteImageFromAdvertisement(advertisementId, fileName);
            return StatusCode(200);
        }

        /// <summary>
        /// get profile image
        /// </summary>
        /// <remarks>Get profile image</remarks>
        /// <response code="200">Success</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpGet]
        [Route("profile")]
        public virtual IActionResult GetImage()
        {
            //deprecated
            try
            {
                var img = _imgService.GetImage();
                return new ObjectResult(img.ToJson());
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception at fetching profile image: " + e.Message);
                return this.BadRequest("Exception at fetching profile image: " + e.Message);
            }
        }

        /// <summary>
        /// get images for an advertisement
        /// </summary>
        /// <remarks>Get images for an advertisement</remarks>
        /// <param name="advertisementId"></param>
        /// <response code="200">List of images in the folder</response>
        /// <response code="401"></response>
        [HttpGet]
        [Route("{advertisementId}")]
        public virtual IActionResult GetImges([FromRoute][Required] int advertisementId)
        {
            //deprecated
            try
            {
                var imges = _imgService.GetImages(advertisementId);
                return new ObjectResult(JsonConvert.SerializeObject(imges));
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception at fetching images: " + e.Message);
                return this.BadRequest("Exception at fetching images: " + e.Message);
            }
        }
    }
}
