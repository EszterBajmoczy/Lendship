/*
 * Simple Inventory API
 *
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Lendship.Backend.DTO;
using Lendship.Backend.Interfaces.Services;

namespace Lendship.Backend.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [Authorize]
    [ApiController]
    [Route("[controller]")]
    public class ProfileController : ControllerBase
    {
        private readonly IProfileService _profileService;

        public ProfileController(IProfileService profileService)
        {
            _profileService = profileService;
        }

        /// <summary>
        /// delete profile
        /// </summary>
        /// <remarks>Deletes profile</remarks>
        /// <response code="200">profile deleted</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpDelete]
        public virtual IActionResult DeleteUser()
        {
            try
            {
                _profileService.DeleteUser();
                return StatusCode(200);
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception at deleting profile: " + e.Message);
                return this.BadRequest(e.Message);
            }
        }

        /// <summary>
        /// get user information
        /// </summary>
        /// <remarks>Gets user information</remarks>
        /// <param name="userId">id of the user</param>
        /// <response code="200">message to send</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpGet]
        [Route("{userId}")]
        public virtual IActionResult GetOtherUserInformation([FromRoute][Required]string userId)
        {
            try
            {
                var user = _profileService.GetOtherUserInformation(userId);
                return new ObjectResult(user.ToJson());
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception at geting other user's profile: " + e.Message);
                return this.BadRequest(e.Message);
            }
        }

        /// <summary>
        /// get user information
        /// </summary>
        /// <remarks>Gets user information</remarks>
        /// <response code="200">message to send</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpGet]
        public virtual IActionResult GetUserInformation()
        {
            try
            {
                var user = _profileService.GetUserInformation();
                return new ObjectResult(user.ToJson());
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception at geting user's profile: " + e.Message);
                return this.BadRequest(e.Message);
            }
        }

        /// <summary>
        /// update profile
        /// </summary>
        /// <remarks>Update profile</remarks>
        /// <param name="user">message to send</param>
        /// <response code="200">profile updated</response>
        /// <response code="400">bad request</response>
        /// <response code="401"></response>
        [HttpPut]
        public virtual IActionResult UpdateUserInformation([FromBody]UserDetailsDto user)
        {
            try
            {
                _profileService.UpdateUserInformation(user);
                return StatusCode(200);
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception at updating profile: " + e.Message);
                return this.BadRequest(e.Message);
            }
        }
    }
}
