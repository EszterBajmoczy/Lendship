/*
 * Simple Inventory API
 *
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Lendship.Backend.Models;

namespace Lendship.Backend.DTO
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EvaluationComputedDto : IEquatable<EvaluationComputedDto>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets AdvertiserFlexibility
        /// </summary>

        [DataMember(Name= "advertiserFlexibility")]
        public double AdvertiserFlexibility { get; set; }

        /// <summary>
        /// Gets or Sets AdvertiserReliability
        /// </summary>

        [DataMember(Name = "advertiserReliability")]
        public double AdvertiserReliability { get; set; }

        /// <summary>
        /// Gets or Sets AdvertiserQualityOfProduct
        /// </summary>

        [DataMember(Name = "advertiserQualityOfProduct")]
        public double AdvertiserQualityOfProduct { get; set; }

        /// <summary>
        /// Gets or Sets LenderFlexibility
        /// </summary>

        [DataMember(Name = "lenderFlexibility")]
        public double LenderFlexibility { get; set; }

        /// <summary>
        /// Gets or Sets LenderReliability
        /// </summary>

        [DataMember(Name = "lenderReliability")]
        public double LenderReliability { get; set; }

        /// <summary>
        /// Gets or Sets LenderQualityAtReturn
        /// </summary>

        [DataMember(Name = "lenderQualityAtReturn")]
        public double LenderQualityAtReturn { get; set; }

        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EvaluationAdvertiser {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AdvertiserFlexibility: ").Append(AdvertiserFlexibility).Append("\n");
            sb.Append("  AdvertiserReliability: ").Append(AdvertiserReliability).Append("\n");
            sb.Append("  AdvertiserQualityOfProduct: ").Append(AdvertiserQualityOfProduct).Append("\n");
            sb.Append("  LenderFlexibility: ").Append(LenderFlexibility).Append("\n");
            sb.Append("  LenderReliability: ").Append(LenderReliability).Append("\n");
            sb.Append("  LenderQualityAtReturn: ").Append(LenderQualityAtReturn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EvaluationAdvertiserDto)obj);
        }

        /// <summary>
        /// Returns true if EvaluationAdvertiser instances are equal
        /// </summary>
        /// <param name="other">Instance of EvaluationAdvertiser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EvaluationComputedDto other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && (
                    AdvertiserFlexibility == other.AdvertiserFlexibility ||
                    AdvertiserFlexibility != null &&
                    AdvertiserFlexibility.Equals(other.AdvertiserFlexibility)
                ) && (
                    AdvertiserReliability == other.AdvertiserReliability ||
                    AdvertiserReliability != null &&
                    AdvertiserReliability.Equals(other.AdvertiserReliability)
                ) && (
                    AdvertiserQualityOfProduct == other.AdvertiserQualityOfProduct ||
                    AdvertiserQualityOfProduct != null &&
                    AdvertiserQualityOfProduct.Equals(other.AdvertiserQualityOfProduct)
                ) && (
                    LenderFlexibility == other.LenderFlexibility ||
                    LenderFlexibility != null &&
                    LenderFlexibility.Equals(other.LenderFlexibility)
                ) && (
                    LenderReliability == other.LenderReliability ||
                    LenderReliability != null &&
                    LenderReliability.Equals(other.LenderReliability)
                ) && (
                    LenderQualityAtReturn == other.LenderQualityAtReturn ||
                    LenderQualityAtReturn != null &&
                    LenderQualityAtReturn.Equals(other.LenderQualityAtReturn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (AdvertiserFlexibility != null)
                    hashCode = hashCode * 59 + AdvertiserFlexibility.GetHashCode();
                if (AdvertiserReliability != null)
                    hashCode = hashCode * 59 + AdvertiserReliability.GetHashCode();
                if (AdvertiserQualityOfProduct != null)
                    hashCode = hashCode * 59 + AdvertiserQualityOfProduct.GetHashCode();
                if (LenderFlexibility != null)
                    hashCode = hashCode * 59 + LenderFlexibility.GetHashCode();
                if (LenderReliability != null)
                    hashCode = hashCode * 59 + LenderReliability.GetHashCode();
                if (LenderQualityAtReturn != null)
                    hashCode = hashCode * 59 + LenderQualityAtReturn.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EvaluationComputedDto left, EvaluationComputedDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EvaluationComputedDto left, EvaluationComputedDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
