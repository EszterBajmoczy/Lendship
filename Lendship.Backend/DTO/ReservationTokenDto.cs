/*
 * Simple Inventory API
 *
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using static Lendship.Backend.DTO.ReservationDetailDto;

namespace Lendship.Backend.DTO
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ReservationTokenDto : IEquatable<ReservationTokenDto>
    {
        /// <summary>
        /// Gets or Sets ReservationToken
        /// </summary>

        [DataMember(Name="reservationToken")]
        public string ReservationToken { get; set; }

        /// <summary>
        /// Gets or Sets OtherUser
        /// </summary>
        [DataMember(Name = "otherUser")]
        public UserDto OtherUser { get; set; }

        /// <summary>
        /// Gets or Sets ReservationId
        /// </summary>
        [DataMember(Name = "reservationId")]
        public int ReservationId { get; set; }

        /// <summary>
        /// Gets or Sets AdvertisementId
        /// </summary>
        [DataMember(Name = "advertisementId")]
        public int AdvertisementId { get; set; }

        /// <summary>
        /// Gets or Sets IsLender
        /// </summary>
        [DataMember(Name = "isLender")]
        public bool IsLender { get; set; }

        /// <summary>
        /// Gets or Sets IsAdmitted
        /// </summary>
        [DataMember(Name = "isAdmitted")]
        public bool IsAdmitted { get; set; }

        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Reservation {\n");
            sb.Append("  ReservationToken: ").Append(ReservationToken).Append("\n");
            sb.Append("  OtherUser: ").Append(OtherUser).Append("\n");
            sb.Append("  ReservationId: ").Append(ReservationId).Append("\n");
            sb.Append("  AdvertisementId: ").Append(AdvertisementId).Append("\n");
            sb.Append("  IsLender: ").Append(IsLender).Append("\n");
            sb.Append("  IsAdmitted: ").Append(IsAdmitted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ReservationForAdvertisementDto)obj);
        }

        /// <summary>
        /// Returns true if Reservation instances are equal
        /// </summary>
        /// <param name="other">Instance of Reservation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReservationTokenDto other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ReservationToken == other.ReservationToken ||
                    ReservationToken != null &&
                    ReservationToken.Equals(other.ReservationToken)
                ) && (
                    OtherUser == other.OtherUser ||
                    OtherUser != null &&
                    OtherUser.Equals(other.OtherUser)
                ) && (
                    ReservationId == other.ReservationId ||
                    ReservationId != null &&
                    ReservationId.Equals(other.ReservationId)
                ) && (
                    AdvertisementId == other.AdvertisementId ||
                    AdvertisementId != null &&
                    AdvertisementId.Equals(other.AdvertisementId)
                ) && (
                    IsLender == other.IsLender ||
                    IsLender != null &&
                    IsLender.Equals(other.IsLender)
                ) && (
                    IsAdmitted == other.IsAdmitted ||
                    IsAdmitted != null &&
                    IsAdmitted.Equals(other.IsAdmitted)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (ReservationToken != null)
                    hashCode = hashCode * 59 + ReservationToken.GetHashCode();
                if (OtherUser != null)
                    hashCode = hashCode * 59 + OtherUser.GetHashCode();
                if (ReservationId != null)
                    hashCode = hashCode * 59 + ReservationId.GetHashCode();
                if (AdvertisementId != null)
                    hashCode = hashCode * 59 + AdvertisementId.GetHashCode();
                if (IsLender != null)
                    hashCode = hashCode * 59 + IsLender.GetHashCode();
                if (IsAdmitted != null)
                    hashCode = hashCode * 59 + IsAdmitted.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(ReservationTokenDto left, ReservationTokenDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReservationTokenDto left, ReservationTokenDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
