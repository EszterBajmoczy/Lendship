/*
 * Simple Inventory API
 *
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.Collections.Generic;

namespace Lendship.Backend.DTO
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AdvertisementListDto : IEquatable<AdvertisementListDto>
    {
        /// <summary>
        /// Gets or Sets Pages
        /// </summary>

        [DataMember(Name="pages")]
        public int Pages { get; set; }

        /// <summary>
        /// Gets or Sets Advertisements
        /// </summary>
        /// 
        [DataMember(Name="advertisements")]
        public IEnumerable<AdvertisementDto> Advertisements { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Category {\n");
            sb.Append("  Pages: ").Append(Pages).Append("\n");
            sb.Append("  Advertisements: ").Append(Advertisements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AdvertisementListDto)obj);
        }

        /// <summary>
        /// Returns true if Advertisement instances are equal
        /// </summary>
        /// <param name="other">Instance of Advertisement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdvertisementListDto other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Pages == other.Pages ||
                    Pages != null &&
                    Pages.Equals(other.Pages)
                ) && 
                (
                    Advertisements == other.Advertisements ||
                    Advertisements != null &&
                    Advertisements.Equals(other.Advertisements)
                ) ;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Pages != null)
                    hashCode = hashCode * 59 + Pages.GetHashCode();
                    if (Advertisements != null)
                    hashCode = hashCode * 59 + Advertisements.GetHashCode();
                return hashCode;
            }
        }


        #region Operators
#pragma warning disable 1591

        public static bool operator ==(AdvertisementListDto left, AdvertisementListDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AdvertisementListDto left, AdvertisementListDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
