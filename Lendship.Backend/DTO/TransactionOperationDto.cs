/*
 * Simple Inventory API
 *
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Lendship.Backend.DTO
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TransactionOperationDto : IEquatable<TransactionOperationDto>
    {
        /// <summary>
        /// Gets or Sets Succeeded
        /// </summary>

        [DataMember(Name= "succeeded")]
        public bool Succeeded { get; set; }

        /// <summary>
        /// Gets or Sets Operation
        /// </summary>
        [Required]
        
        [DataMember(Name="operation")]
        public string Operation { get; set; }

        /// <summary>
        /// Gets or Sets Credit
        /// </summary>
        [Required]

        [DataMember(Name = "credit")]
        public int Credit { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [Required]

        [DataMember(Name = "message")]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets OtherUser
        /// </summary>
        [DataMember(Name = "otherUser")]
        public UserDto OtherUser { get; set; }

        /// <summary>
        /// Gets or Sets ReservationId
        /// </summary>
        [DataMember(Name = "reservationId")]
        public int ReservationId { get; set; }

        /// <summary>
        /// Gets or Sets AdvertisementId
        /// </summary>
        [DataMember(Name = "advertisementId")]
        public int AdvertisementId { get; set; }

        /// <summary>
        /// Gets or Sets IsLender
        /// </summary>
        [DataMember(Name = "isLender")]
        public bool IsLender { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransferOperation {\n");
            sb.Append("  Succeeded: ").Append(Succeeded).Append("\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("  Credit: ").Append(Credit).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  OtherUser: ").Append(OtherUser).Append("\n");
            sb.Append("  ReservationId: ").Append(ReservationId).Append("\n");
            sb.Append("  AdvertisementId: ").Append(AdvertisementId).Append("\n");
            sb.Append("  IsLender: ").Append(IsLender).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CategoryDto)obj);
        }

        /// <summary>
        /// Returns true if Advertisement instances are equal
        /// </summary>
        /// <param name="other">Instance of Advertisement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionOperationDto other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Succeeded == other.Succeeded ||
                    Succeeded != null &&
                    Succeeded.Equals(other.Succeeded)
                ) && 
                (
                    Operation == other.Operation ||
                    Operation != null &&
                    Operation.Equals(other.Operation)
                ) &&
                (
                    Credit == other.Credit ||
                    Credit != null &&
                    Credit.Equals(other.Credit)
                ) &&
                (
                    Message == other.Message ||
                    Message != null &&
                    Message.Equals(other.Message)
                ) &&
                (
                    OtherUser == other.OtherUser ||
                    OtherUser != null &&
                    OtherUser.Equals(other.OtherUser)
                ) &&
                (
                    ReservationId == other.ReservationId ||
                    ReservationId != null &&
                    ReservationId.Equals(other.ReservationId)
                ) &&
                (
                    AdvertisementId == other.AdvertisementId ||
                    AdvertisementId != null &&
                    AdvertisementId.Equals(other.AdvertisementId)
                ) &&
                (
                    IsLender == other.IsLender ||
                    IsLender != null &&
                    IsLender.Equals(other.IsLender)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Succeeded != null)
                hashCode = hashCode * 59 + Succeeded.GetHashCode();
                if (Operation != null)
                hashCode = hashCode * 59 + Operation.GetHashCode();
                if (Credit != null)
                hashCode = hashCode * 59 + Credit.GetHashCode();
                if (Message != null)
                hashCode = hashCode * 59 + Message.GetHashCode();
                if (OtherUser != null)
                hashCode = hashCode * 59 + OtherUser.GetHashCode();
                if (ReservationId != null)
                hashCode = hashCode * 59 + ReservationId.GetHashCode();
                if (AdvertisementId != null)
                hashCode = hashCode * 59 + AdvertisementId.GetHashCode();
                if (IsLender != null)
                hashCode = hashCode * 59 + IsLender.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TransactionOperationDto left, TransactionOperationDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TransactionOperationDto left, TransactionOperationDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
